name: Deploy

on:
  push:

jobs:
  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/cargo-audit
          key: cargo-audit
      - name: Install cargo-audit
        run: cargo -v install cargo-audit
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch }}
      - name: Audit
        run: |
          cargo audit -D warnings --ignore RUSTSEC-2020-0016
          echo '::warning::Ignoring alert for issue https://github.com/khonsulabs/kludgine/issues/47'
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1

      - name: Rust Formatting
        run: cargo fmt --verbose -- --check

  lint:
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: wasm32-unknown-unknown

      - name: Install x11 dependencies for Kludgine
        run: |
          sudo apt-get install -yqq \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Run migrations on CI postgres
        run: |
          cargo run --bin migrator

      - name: Clippy
        run: cargo clippy --all-targets -p cosmicverge -p database -p
          cosmicverge-server -p cosmicverge-shared --verbose -- -D warnings

      - name: Clippy Web
        run: cargo clippy --all-targets --target wasm32-unknown-unknown -p web
          --verbose -- -D warnings

      - name: Rustdoc
        run: cargo doc --no-deps --document-private-items --workspace --verbose
        env:
          RUSTDOCFLAGS: -D warnings

  test:
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1

      - name: Install x11 dependencies for Kludgine
        run: |
          sudo apt-get install -yqq \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Run migrations on CI postgres
        run: |
          cargo run --bin migrator --release

      - name: Run tests
        run: |
          cargo test --release --verbose
        env:
          BASWS_CLIENT_ENCRYPTION_KEY: abcdefghijklmnopqrstuvwxzy123456

  coverage:
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Install x11 dependencies for Kludgine
        run: |
          sudo apt-get install -yqq \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Install code coverage requirements
        run: |
          rustup component add llvm-tools-preview
          rustup install nightly
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -

      - name: Run code coverage
        run: |
          cargo +nightly run --bin migrator
          cargo +nightly test

          zip -0 ccov.zip `find . \( -name "cosmicverge_shared-*.gc*" \) -print`
          zip -0 ccov.zip `find . \( -name "cosmicverge_server-*.gc*" \) -print`
          zip -0 ccov.zip `find . \( -name "cosmicverge-*.gc*" \) -print`
          zip -0 ccov.zip `find . \( -name "database-*.gc*" \) -print`
          zip -0 ccov.zip `find . \( -name "migrations-*.gc*" \) -print`
          zip -0 ccov.zip `find . \( -name "web-*.gc*" \) -print`

          rm -rf target
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" --ignore "/target" -o lcov.info
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests" # TODO: https://github.com/alexcrichton/proc-macro2/issues/218
          RUSTDOCFLAGS: "-Cpanic=abort"

      - name: Upload coverage
        run: |
          bash <(curl -s https://codecov.io/bash) -f lcov.info;
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/production'
    needs: test

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: true
          ssh-key: ${{ secrets.BOTSU_PRIVATE_SSH_KEY }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/wasm-bindgen
            ~/binaryen/bin/wasm-opt
            ~/binaryen/lib/libbinaryen.so

          key: build-tools

      - name: Install binaryen
        run: |
          if [ ! -f ~/binaryen/lib/libbinaryen.so ]; then
            wget https://github.com/WebAssembly/binaryen/archive/version_99.tar.gz
            mkdir ~/binaryen
            tar -xzf version_99.tar.gz -C ~/binaryen --strip-components 1
            cd ~/binaryen
            cmake . 
            make
          fi

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1

      - name: Install wasm-bindgen-cli
        run: cargo -v install wasm-bindgen-cli

      - name: Install Sass
        run: |
          sudo npm install -g sass

      - name: Install x11 dependencies for Kludgine
        run: |
          sudo apt-get install -yqq \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_WRITE_API_KEY }}

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Run migrations on CI postgres
        run: |
          cargo run --bin migrator --release

      - name: Build
        # TODO replace with cargo make build after hooking that tool back up
        run: |
          cd web
          sed -i s/CACHEBUSTER/`uuidgen`/g static/bootstrap.html
          cargo build --target wasm32-unknown-unknown --target-dir ./target --release
          wasm-bindgen target/wasm32-unknown-unknown/release/web.wasm --target web --out-dir static/pkg --out-name web --remove-producers-section
          ~/binaryen/bin/wasm-opt -Os static/pkg/web_bg.wasm -o static/pkg/web_bg.wasm
          sass sass/styles.sass static/styles.css

          cd ..
          cargo build --bin cosmicverge-server --release
          cargo run --bin cosmicverge-server --release -- generate-assets ../web/static/
        env:
          BASWS_CLIENT_ENCRYPTION_KEY: ${{ secrets.CLIENT_ENCRYPTION_KEY }}

      - name: Authenticate with DigitalOcean Registry
        run: |
          doctl registry login --expiry-seconds 600

      - name: Publish Docker Image
        run: |
          docker build . -t registry.digitalocean.com/khonsulabs/cosmicverge:sha-$GITHUB_SHA -t registry.digitalocean.com/khonsulabs/cosmicverge:main
          docker push -a registry.digitalocean.com/khonsulabs/cosmicverge

      - name: Update Kubernetes
        run: |
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

          sed -i s/cosmicverge:main/cosmicverge:sha-$GITHUB_SHA/g kubernetes/production.yml
          kubectl apply -f kubernetes/production.yml
          # Wait for the deployment to finish
          kubectl rollout status deployment/cosmicverge --timeout=120s
        env:
          CLUSTER_ID: ${{ secrets.PRODUCTION_CLUSTER_ID }}

        # This is because each worker sends some static resources. We could deploy the static resources before the new CACHEBUSTER gets deployed
        # but we need to deploy it using a simple SPA wrapper which is kind of annoying. For now, there may be cache confusion while kube updates
        # but we purge the cache afterwards to clean it up
      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          # Zone is required by both authentication methods
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Generate Docs
        run: |
          cargo doc --no-deps --release
        env:
          BASWS_CLIENT_ENCRYPTION_KEY: ${{ secrets.CLIENT_ENCRYPTION_KEY }}

      - name: Deploy Docs
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages
          folder: target/doc/
          git-config-name: kl-botsu
          git-config-email: botsu@khonsulabs.com
          target-folder: main/
          clean: true
